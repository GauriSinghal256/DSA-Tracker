import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { GoogleGenerativeAI } from "@google/generative-ai";

// üß© Helper function for fallback (if Gemini not working)
const generateFallbackResponse = (message, lastProblem) => {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes("algorithm") || lowerMessage.includes("algo")) {
        return `ü§ñ **Algorithm Guidance**  
Focus on these algorithm types:  
‚Ä¢ Sorting (Quick Sort, Merge Sort, Heap Sort)  
‚Ä¢ Searching (Binary Search, DFS, BFS)  
‚Ä¢ Dynamic Programming (Memoization, Tabulation)  
‚Ä¢ Graph Algorithms (Dijkstra, Floyd-Warshall)  
‚Ä¢ Tree Traversals (Inorder, Preorder, Postorder)  
Practice implementing them from scratch to build intuition!`;
    }

    if (lowerMessage.includes("data structure") || lowerMessage.includes("ds")) {
        return `üèóÔ∏è **Data Structures to Master**  
‚Ä¢ Arrays, Strings (Two Pointers, Sliding Window)  
‚Ä¢ Linked Lists (Reversal, Cycle Detection)  
‚Ä¢ Stacks & Queues (Monotonic Stack, BFS)  
‚Ä¢ Trees (BST, AVL, Trie)  
‚Ä¢ Graphs (Adjacency List, Matrix)  
‚Ä¢ Hash Tables (Collision Handling)`;
    }

    if (lowerMessage.includes("interview")) {
        return `üéØ **Interview Preparation Tips**  
‚Ä¢ 2‚Äì3 problems per topic  
‚Ä¢ Time complexity analysis  
‚Ä¢ Mock interviews weekly  
Focus on Arrays, Trees, Graphs, DP, and System Design.`;
    }

    if (lowerMessage.includes("practice")) {
        return `üìö **Study Plan**  
**Daily:** Solve 1‚Äì2 problems & review old ones  
**Weekly:** Focus each day on a topic (Arrays, Trees, Graphs, DP)  
**Weekend:** Revise + mock interviews  
Consistency > Quantity.`;
    }

    return `ü§ñ **General DSA Guidance**  
1Ô∏è‚É£ Understand the problem clearly  
2Ô∏è‚É£ Identify patterns & suitable data structures  
3Ô∏è‚É£ Write a plan before coding  
4Ô∏è‚É£ Test with edge cases  
5Ô∏è‚É£ Optimize  
Practice patterns like Two Pointers, Sliding Window, DP, Graphs, etc.`;
};

// üöÄ Main Controller
const chatWithAI = asyncHandler(async (req, res) => {
    console.log("üì© Incoming AI chat request:", req.body);

    const { message, lastProblem } = req.body;

    if (!message || message.trim() === "") {
        throw new ApiError(400, "Message is required");
    }

    // ‚úÖ Check if API key exists
    if (!process.env.GEMINI_API_KEY) {
        console.warn("‚ö†Ô∏è GEMINI_API_KEY is missing. Using fallback response...");
        const fallbackResponse = generateFallbackResponse(message, lastProblem);
        return res
            .status(200)
            .json(new ApiResponse(200, { response: fallbackResponse }, "Fallback used"));
    }

    try {
        // Initialize Gemini
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // Build prompt context
        let context = `
You are an expert DSA mentor helping students improve problem-solving skills.
Your response should be:
‚Ä¢ Clear and actionable  
‚Ä¢ Motivating and encouraging  
‚Ä¢ Based on the student's last solved problem (if any)`;

        if (lastProblem) {
            context += `
The student recently solved:
- Title: ${lastProblem.title}
- Platform: ${lastProblem.platform}
- Difficulty: ${lastProblem.difficulty}
- Tags: ${lastProblem.tags.join(", ")}
Use this context to give relevant next steps.`;
        }

        const prompt = `${context}\n\nStudent Query: ${message}\n\nRespond in 2‚Äì3 short paragraphs with encouragement and actionable steps.`;

        console.log("üß† Sending prompt to Gemini...");
        const result = await model.generateContent(prompt);
        const text = result.response.text();

        console.log("‚úÖ Gemini response generated successfully.");
        return res
            .status(200)
            .json(new ApiResponse(200, { response: text }, "AI response generated"));
    } catch (error) {
        console.error("‚ùå Gemini AI Error:", error.message);
        const fallbackResponse = generateFallbackResponse(message, lastProblem);
        return res
            .status(200)
            .json(
                new ApiResponse(
                    200,
                    { response: fallbackResponse },
                    "Fallback used due to Gemini error"
                )
            );
    }
});

export { chatWithAI };
